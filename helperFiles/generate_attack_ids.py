#!/usr/bin/env python3
"""Generate/extend v2/game/ids/attacks.py with sequential attack-id mapping.

Usage:
    python helperFiles/generate_attack_ids.py \
        --cards v2/assets/cards/a1-genetic-apex.json \
        --output v2/game/ids/attacks.py

If the output file already defines `ATTACK_IDS`, existing indices are
preserved and only new IDs are appended with the next available number.
"""
from __future__ import annotations

import argparse
import importlib.util
import json
import os
import sys
from pathlib import Path
from typing import Dict, List

DEFAULT_CARDS = ["v2/assets/cards/a1-genetic-apex.json"]
DEFAULT_OUTPUT = "v2/game/ids/attacks.py"


def to_camel_case(text: str) -> str:
    """Convert text to lowerCamelCase and strip spaces/underscores."""
    if not text:
        return ""
    words = text.replace("_", " ").split()
    return words[0].lower() + "".join(w.capitalize() for w in words[1:])


def generate_attack_id(card: dict, attack: dict) -> str:
    """Return canonical attack identifier for a card/attack pair."""
    return (
        f"{card['id']}_{to_camel_case(card['name'])}_"
        f"{to_camel_case(attack['name'])}_active_active"
    )


def load_existing_mapping(py_path: Path) -> Dict[str, int]:
    """Import ATTACK_IDS from an existing Python file if it exists."""
    if not py_path.exists():
        return {}
    spec = importlib.util.spec_from_file_location("attacks_module", str(py_path))
    module = importlib.util.module_from_spec(spec)  # type: ignore[arg-type]
    assert spec.loader is not None
    spec.loader.exec_module(module)  # type: ignore[arg-type]
    return getattr(module, "ATTACK_IDS", {})  # type: ignore[return-value]


def collect_attacks(card_files: List[str]) -> List[str]:
    """Return sorted list of attack IDs from the given card JSON files."""
    ids: List[str] = []
    for path in card_files:
        if not os.path.exists(path):
            print(f"[WARN] Card file not found: {path}")
            continue
        with open(path, "r", encoding="utf-8") as f:
            cards = json.load(f)
        for card in cards:
            for attack in card.get("attacks", []):
                ids.append(generate_attack_id(card, attack))
    return sorted(set(ids))


def build_mapping(all_ids: List[str], existing: Dict[str, int]) -> Dict[str, int]:
    """Return merged mapping preserving existing indices, adding new sequentially."""
    mapping = dict(existing)
    next_index = max(mapping.values(), default=-1) + 1
    for aid in all_ids:
        if aid not in mapping:
            mapping[aid] = next_index
            next_index += 1
    return mapping


def write_output(mapping: Dict[str, int], output_path: Path):
    """Write the attacks.py file with ATTACK_IDS mapping and helper docstring."""
    output_path.parent.mkdir(parents=True, exist_ok=True)
    # Sort by index for readability/stability
    lines = [f'    "{k}": {v},' for k, v in sorted(mapping.items(), key=lambda kv: kv[1])]

    header = (
        "from typing import Dict\n\n"
        "# Auto-generated by helperFiles/generate_attack_ids.py\n"
        "# DO NOT EDIT MANUALLY.\n\n"
        "ATTACK_IDS: Dict[str, int] = {\n"
    )
    footer = "}\n"
    content = header + "\n".join(lines) + "\n" + footer

    with open(output_path, "w", encoding="utf-8") as f:
        f.write(content)

    print(f"[OK] Wrote {len(mapping)} attack ids to {output_path}")


def main():
    parser = argparse.ArgumentParser(description="Generate/update ATTACK_IDS mapping.")
    parser.add_argument(
        "--cards",
        nargs="*",
        default=DEFAULT_CARDS,
        help="Card JSON file(s) to process",
    )
    parser.add_argument(
        "--output",
        default=DEFAULT_OUTPUT,
        help="Path to attacks.py (will be created/updated)",
    )
    args = parser.parse_args()

    output_path = Path(args.output)
    existing = load_existing_mapping(output_path)
    if existing:
        print(f"[INFO] Loaded {len(existing)} existing attack ids from {output_path}")

    attack_ids = collect_attacks(args.cards)
    print(f"[INFO] Found {len(attack_ids)} unique attacks in card files")

    new_mapping = build_mapping(attack_ids, existing)
    write_output(new_mapping, output_path)


if __name__ == "__main__":
    main() 